1. Protecting the /favorites Route with <PrivateRoute />
âœ… Step 1: Create PrivateRoute Component
Create src/components/PrivateRoute.js:

js

import { Navigate } from 'react-router-dom';

const PrivateRoute = ({ children }) => {
  const token = localStorage.getItem('token');
  return token ? children : <Navigate to="/login" />;
};

export default PrivateRoute;
âœ… Step 2: Wrap Protected Routes in App.js
js

import PrivateRoute from './components/PrivateRoute';
import Favorites from './components/Favorites'; // Create this if not already

<Routes>
  <Route path="/" element={<Home />} />
  <Route path="/login" element={<Login />} />
  <Route path="/register" element={<Register />} />
  <Route
    path="/favorites"
    element={
      <PrivateRoute>
        <Favorites />
      </PrivateRoute>
    }
  />
</Routes>
Now, if a user isnâ€™t logged in and visits /favorites, theyâ€™ll be redirected to /login.


2. Creating Smarter Recommendations Based on Favorites


âœ… Step 1: Track Genre IDs from Favorite Movies
In Home.js (where you fetch favorites), get the most frequent genres from saved movies:

js

const getTopGenres = (movies) => {
  const genreCount = {};
  movies.forEach(movie => {
    movie.genres?.forEach(genre => {
      genreCount[genre.id] = (genreCount[genre.id] || 0) + 1;
    });
  });
  const sorted = Object.entries(genreCount).sort((a, b) => b[1] - a[1]);
  return sorted.slice(0, 2).map(([id]) => parseInt(id));
};

âœ… Step 2: Fetch Recommendations Based on Genre
Add to services/tmdb.js:

js

export const getMoviesByGenre = async (genreId) => {
  const res = await axios.get(`${BASE_URL}/discover/movie`, {
    params: {
      api_key: API_KEY,
      with_genres: genreId,
    },
  });
  return res.data.results;
};
âœ… Step 3: Create a SmartRecommendations Component

js

import React, { useEffect, useState } from 'react';
import { getMoviesByGenre } from '../services/tmdb';

const SmartRecommendations = ({ genres }) => {
  const [recommended, setRecommended] = useState([]);

  useEffect(() => {
    const fetchAll = async () => {
      const allMovies = await Promise.all(genres.map(id => getMoviesByGenre(id)));
      setRecommended(allMovies.flat());
    };

    if (genres.length) fetchAll();
  }, [genres]);

  return (
    <div>
      <h2 className="text-xl font-bold mb-2">Smart Recommendations</h2>
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        {recommended.slice(0, 8).map(movie => (
          <div key={movie.id} className="rounded shadow p-2 hover:scale-105 transition-transform">
            <img src={`https://image.tmdb.org/t/p/w300${movie.poster_path}`} alt={movie.title} className="w-full rounded" />
            <h4 className="mt-1 text-sm font-semibold">{movie.title}</h4>
          </div>
        ))}
      </div>
    </div>
  );
};


3. Polishing UI with Tailwind: Cards, Posters, Hover Effects
Update your list views (e.g., MovieSearch, Favorites, Recommendations) to use Tailwindâ€™s utility classes:

jsx

<div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
  {movies.map(movie => (
    <div key={movie.id} className="bg-white rounded-xl overflow-hidden shadow-md hover:shadow-xl transition duration-300 transform hover:scale-105">
      <img src={`https://image.tmdb.org/t/p/w300${movie.poster_path}`} alt={movie.title} className="w-full h-60 object-cover" />
      <div className="p-3">
        <h3 className="text-base font-bold">{movie.title}</h3>
        <p className="text-sm text-gray-600">{movie.release_date?.slice(0, 4)}</p>
      </div>
    </div>
  ))}
</div>

ðŸ”š Summary of What You Now Have
âœ… /favorites route protected with <PrivateRoute />

âœ… Smarter recommendations based on genre of saved movies

âœ… Beautiful, responsive card UI with Tailwind and hover effects